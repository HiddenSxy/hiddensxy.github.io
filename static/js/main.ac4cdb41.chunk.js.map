{"version":3,"sources":["logo.svg","Clock.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["FormattedDate","props","beginDate","Date","setFullYear","setHours","total","date","day","parseInt","afterDay","hour","afterHour","minute","second","Clock","state","this","timerID","setInterval","tick","clearInterval","setState","React","Component","RandomString","array","index","Math","floor","random","length","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAAe,I,wCCEf,SAASA,EAAeC,GACtB,IAAIC,EAAY,IAAIC,KACpBD,EAAUE,YAAY,KAAM,EAAG,IAC/BF,EAAUG,SAAS,EAAE,EAAE,EAAE,GACzB,IAAIC,GAASL,EAAMM,KAAOL,GAAa,IACnCM,EAAMC,SAASH,EAAK,OACpBI,EAAWJ,EAAe,GAANE,EAAW,GAAK,GACpCG,EAAOF,SAASC,EAAQ,MACxBE,EAAYF,EAAkB,GAAPC,EAAY,GACnCE,EAASJ,SAASG,EAAY,IAC9BE,EAASL,SAASG,EAAqB,GAATC,GAClC,OAAO,sEAAWL,EAAX,WAAmBG,EAAnB,iBAA6BE,EAA7B,WAAwCC,EAAxC,yB,IAqCMC,E,kDAjCb,WAAad,GAAQ,IAAD,8BAClB,cAAMA,IACDe,MAAQ,CACXT,KAAM,IAAIJ,MAHM,E,qDAOpB,WAAsB,IAAD,OACnBc,KAAKC,QAAUC,aACb,kBAAM,EAAKC,SACX,O,kCAIJ,WACEC,cAAcJ,KAAKC,W,kBAGrB,WACED,KAAKK,SAAS,CACZf,KAAM,IAAIJ,S,oBAId,WACE,OACE,8BACE,cAACH,EAAD,CAAeO,KAAMU,KAAKD,MAAMT,a,GA5BpBgB,IAAMC,WCZ1B,SAASC,IACP,IAAMC,EAAQ,CAIZ,0GAEEC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMK,QAC7C,OAAO,6BAAKL,EAAMC,KA0BLK,MAvBf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UAaE,cAACR,EAAD,IACA,cAAC,EAAD,UCpBOS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ac4cdb41.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\n\nfunction FormattedDate (props) {\n  let beginDate = new Date()\n  beginDate.setFullYear(2021, 5, 16)\n  beginDate.setHours(0,0,0,0)\n  let total = (props.date - beginDate) / 1000\n  let day = parseInt(total / (60 * 60 * 24))\n  let afterDay = total -  day * 60 * 60 * 24\n  let hour = parseInt(afterDay / (60 * 60))\n  let afterHour = afterDay - hour * 60 * 60\n  let minute = parseInt(afterHour / 60)\n  let second = parseInt(afterHour - minute * 60)\n  return <p>认识虎贲已经 {day} 天 {hour} 小时 {minute} 分 {second} 秒啦！</p>\n}\n\nclass Clock extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      date: new Date()\n    }\n  }\n\n  componentDidMount () {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    )\n  }\n\n  componentWillUnmount () {\n    clearInterval(this.timerID)\n  }\n\n  tick () {\n    this.setState({\n      date: new Date()\n    })\n  }\n\n  render () {\n    return (\n      <div>\n        <FormattedDate date={this.state.date} />\n      </div>\n    )\n  }\n}\n\nexport default Clock\n","import logo from './logo.svg';\nimport './App.css';\nimport Clock from \"./Clock\";\n\nfunction RandomString() {\n  const array = [\n    // \"你又来偷偷看我，想我就直接找我聊天好吗。\",\n    // \"祝你下一个情人节不再是孤身一人。\",\n    // \"现在开始，期待一下明年的七夕吧。\"\n    \"啊哦，页面不见啦，快联系管理员吧！\"\n  ]\n  let index = Math.floor(Math.random() * array.length)\n  return <h3>{array[index]}</h3>\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n        {/*<p>*/}\n        {/*  Edit <code>src/App.jsx</code> and save to reload.*/}\n        {/*</p>*/}\n        {/*<a*/}\n        {/*  className=\"App-link\"*/}\n        {/*  href=\"https://reactjs.org\"*/}\n        {/*  target=\"_blank\"*/}\n        {/*  rel=\"noopener noreferrer\"*/}\n        {/*>*/}\n        {/*  Learn React*/}\n        {/*</a>*/}\n        <RandomString />\n        <Clock />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}